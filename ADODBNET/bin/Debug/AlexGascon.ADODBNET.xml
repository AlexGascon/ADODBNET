<?xml version="1.0"?>
<doc>
<assembly>
<name>
AlexGascon.ADODBNET
</name>
</assembly>
<members>
<member name="T:AlexGascon.ADODBNET.ADODBNET.LockTypeEnum">
	<summary>
 Lock types available to use on the ADODBNET objects. They're an exact copy of the ADODB ones
 Reference: http://www.w3schools.com/asp/prop_rs_locktype.asp
 </summary>
	<remarks><seealso cref="T:AlexGascon.ADODBNET.ADODBNET.CursorLocationEnum"/>
		<seealso cref="T:AlexGascon.ADODBNET.ADODBNET.CursorTypeEnum"/></remarks>
</member><member name="T:AlexGascon.ADODBNET.ADODBNET.CursorTypeEnum">
	<summary>
Cursor types available to use on the ADODBNET objects. They're an exact copy of the ADODB ones
 Reference: http://www.w3schools.com/asp/prop_rs_cursortype.asp
 </summary>
	<remarks><seealso cref="T:AlexGascon.ADODBNET.ADODBNET.CursorLocationEnum"/>
		<seealso cref="T:AlexGascon.ADODBNET.ADODBNET.LockTypeEnum"/></remarks>
</member><member name="T:AlexGascon.ADODBNET.ADODBNET.CursorLocationEnum">
	<summary>
 Cursor locations available to use in ADODBNET objects. They're an exact copy of the ADODB ones
 Reference: http://www.w3schools.com/asp/prop_rs_cursorlocation.asp
 </summary>
	<remarks><seealso cref="T:AlexGascon.ADODBNET.ADODBNET.CursorTypeEnum"/>
		<seealso cref="T:AlexGascon.ADODBNET.ADODBNET.LockTypeEnum"/></remarks>
</member><member name="F:AlexGascon.ADODBNET.ADODBNET.Connection.ConnectionString">
	<summary name="ConnectionString" type="String">String that contains the info of the connection 
 to the DB.</summary>
	<remarks>Must be initialized in order to establish the connection</remarks>
</member><member name="F:AlexGascon.ADODBNET.ADODBNET.Connection.CommandTimeout">
	<summary name="CommandTimeout" type="Integer"> Integer representing the amount of time (in seconds) 
 that we'llbe waiting after executing a Command before we abort the connection</summary>
</member><member name="P:AlexGascon.ADODBNET.ADODBNET.Connection.conn">
	<summary>
 Property that allows us to obtain the connection to the DB. It cannot be modified, so we avoid
 malfunctioning caused by unauthorised changes during runtime.
 </summary>
	<value>Connection to the DB.</value>
	<returns>SqlConnection object that contains the information about the current connection to the DB</returns>
	<remarks>Outside this class, it should only be modified using the Open method. <see cref="M:AlexGascon.ADODBNET.ADODBNET.Connection.Open"></see></remarks>
</member><member name="M:AlexGascon.ADODBNET.ADODBNET.Connection.#ctor(System.String,System.Int32,AlexGascon.ADODBNET.ADODBNET.CursorLocationEnum)">
	<summary>
 Constructor that allows us to define every parameter in the object
 </summary>
	<param name="connString">Value we'll give to the ConnectionString field <see cref="F:AlexGascon.ADODBNET.ADODBNET.Connection.ConnectionString"/></param>
	<param name="commTimeout">Value we'll give to the CommandTimeout field <see cref="F:AlexGascon.ADODBNET.ADODBNET.Connection.CommandTimeout"/></param>
	<param name="cursLoc">Value of the Cursor Location of the ADODBNET.Connection object. <see cref="T:AlexGascon.ADODBNET.ADODBNET.CursorLocationEnum"/></param>
	<remarks></remarks>
</member><member name="M:AlexGascon.ADODBNET.ADODBNET.Connection.#ctor(System.String)">
	<summary>
 Constructor that only defines the ConnectionString of our ADODBNET.Connection object. It sets CommandTimeout to 30
 and CursorLocation to adUseClient (3)
 </summary>
	<param name="connString">Value we'll give to the ConnectionString field <see cref="F:AlexGascon.ADODBNET.ADODBNET.Connection.ConnectionString"/></param>
	<remarks></remarks>
</member><member name="M:AlexGascon.ADODBNET.ADODBNET.Connection.Open">
	<summary>
 Opens the connection to the database. It uses the parameters we've define when creating the object.
 </summary>
	<remarks></remarks>
</member><member name="M:AlexGascon.ADODBNET.ADODBNET.Connection.Open(System.String)">
	<summary>
 Opens the connection to the database specified in the connString parameter, overriding the value we 
 may have in the ConnectionString field.
 </summary>
	<param name="connString">Value we'll give to the ConnectionString field <see cref="F:AlexGascon.ADODBNET.ADODBNET.Connection.ConnectionString"/></param>
	<remarks></remarks>
</member><member name="M:AlexGascon.ADODBNET.ADODBNET.Connection.isOpen">
	<summary>
 Checks if the connection is currently opened
 </summary>
	<returns>True if the connection is opened and False otherwise</returns>
	<remarks></remarks>
</member><member name="T:AlexGascon.ADODBNET.ADODBNET.Connection">
	<summary>
 Class whose objects will be used to manage the connections to the DB. It's the upgrade of the
 ADODB.Connection component, and contains all its fields and methods, besides some extra ones
 that let us define more precisely the behaviour of the connection.
 </summary>
	<remarks>
		<field name="ConnectionString" type="String"><see cref="F:AlexGascon.ADODBNET.ADODBNET.Connection.ConnectionString"/></field>
		<field name="CommandTimeout" type="Integer"><see cref="F:AlexGascon.ADODBNET.ADODBNET.Connection.CommandTimeout"/></field>
		<field name="sqlconn" type="SqlConnection">VB.NET native object that manages the connection to the DB. It sholudn't
  be public, as it wasn't part of the original ADODB Connection component and shouldn't be modified
  by this way. Nonetheless, it may be accessed from other components of the ADODBNET class, in order
 to simplify the operations we're going to do. </field>
		<field name="conn" type="SqlConnection"><see cref="P:AlexGascon.ADODBNET.ADODBNET.Connection.conn"/></field>
	</remarks>
</member><member name="F:AlexGascon.ADODBNET.ADODBNET.Command.ActiveConnection">
	<summary name="ActiveConnection" type="ADODBNET.Connection">Object that manages the connection to the DB</summary>
	<remarks>The connection must be opened before executing the command.</remarks>
</member><member name="F:AlexGascon.ADODBNET.ADODBNET.Command.CommandText">
	<summary name="CommandText" type="String">String containing the command we want to execute</summary>
</member><member name="F:AlexGascon.ADODBNET.ADODBNET.Command.CommandTimeout">
	<summary name="CommandTimeout" type="Integer"> Integer representing the amount of time (in seconds) 
 that we'llbe waiting after executing a Command before we abort the connection</summary>
</member><member name="M:AlexGascon.ADODBNET.ADODBNET.Command.Execute">
	<summary>
 Method that begins the execution of the command on the DB. 
 </summary>
	<remarks>It doesn't take any parameter; instead, the values of the command and the connection are
 given by the ones we've already specified.</remarks>
</member><member name="T:AlexGascon.ADODBNET.ADODBNET.Command">
	<summary>
 Class whose objects can execute commands on a determined database, specified by a Connection object
 that we'll define. Nonetheless, those commands cannot expect any result in return; i.e. we can only execute the
 ones that affect the DB elements (INSERT, UPDATE, DELETE...)
 </summary>
	<remarks>
		<field name="ActiveConnection" type="ADODBNET.Connection"><see cref="F:AlexGascon.ADODBNET.ADODBNET.Command.ActiveConnection"/></field>
		<field name="CommandText" type="String"><see cref="F:AlexGascon.ADODBNET.ADODBNET.Command.CommandText"/></field>
		<field name="CommandTimeout" type="Integer"><see cref="F:AlexGascon.ADODBNET.ADODBNET.Command.CommandTimeout"/></field>
	</remarks>
</member><member name="F:AlexGascon.ADODBNET.ADODBNET.Field.Name">
	<summary> Name that the field has in the DB</summary>
</member><member name="F:AlexGascon.ADODBNET.ADODBNET.Field.Type">
	<summary> Type of the data, so we can create variables or operate with it</summary>
</member><member name="F:AlexGascon.ADODBNET.ADODBNET.Field.DefinedSize">
	<summary> Size the object needs in memory</summary>
	<remarks>IMPORTANT: When it comes to Strings/arrays/collections, the size isn't calculated properly. Will be update in future revisions</remarks>
</member><member name="F:AlexGascon.ADODBNET.ADODBNET.Field.rsDataAdapter">
	<summary> DataAdapter that the RecordSet has used to connect to the DB. Needed for executing updates on it.</summary>
</member><member name="F:AlexGascon.ADODBNET.ADODBNET.Field.rsDataSet">
	<summary> DataSet that represents the elements of the RecordSet. Needed for updating the DB.</summary>
</member><member name="F:AlexGascon.ADODBNET.ADODBNET.Field.currentTable">
	<summary> Integers that represent the position of the field </summary>
</member><member name="F:AlexGascon.ADODBNET.ADODBNET.Field.ADO_CON">
	<summary> Object that represents the connection to the DB. Is needed for executing updates on it.</summary>
</member><member name="T:AlexGascon.ADODBNET.ADODBNET.Field">
	<summary>
 Class we'll use to represent the information we obtain from the cells of an ADODBNET.RecordSet. We can also update them through this objects. 
 </summary>
	<remarks>
		<field name="Name" type="String"><see cref="F:AlexGascon.ADODBNET.ADODBNET.Field.Name"/></field>
		<field name="Type" type="Type"><see cref="F:AlexGascon.ADODBNET.ADODBNET.Field.Type"/></field>
		<field name="DefinedSize" type="Integer"><see cref="F:AlexGascon.ADODBNET.ADODBNET.Field.DefinedSize"/></field>
		<field name="rsDataAdapter" type="SqlDataAdapter"><see cref="F:AlexGascon.ADODBNET.ADODBNET.Field.rsDataAdapter"/></field>
		<field name="rsDataSet" type="DataSet"><see cref="F:AlexGascon.ADODBNET.ADODBNET.Field.rsDataSet"/></field>
		<field name="currentTable, currentRow, currentColumn" type="Integer"><see cref="F:AlexGascon.ADODBNET.ADODBNET.Field.currentTable"/></field>
		<field name="ADO_CON" type="ADODBNET.Connection"><see cref="F:AlexGascon.ADODBNET.ADODBNET.Field.ADO_CON"/></field>
	</remarks>
</member><member name="P:AlexGascon.ADODBNET.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:AlexGascon.ADODBNET.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:AlexGascon.ADODBNET.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
</members>
</doc>